use failure::Error;
use fehler::throws;
use lightgbm::{DType, LightGBM, PredictType};

#[throws(Error)]
fn main() {
    let model = LightGBM::load_from_file("model.lgbm").unwrap();
    println!("# classes {}, # iterations {}", model.num_classes()?, model.num_iterations());

    let feat = vec![
        0.00014698230766087365,
        0.00013856547262469662,
        0.00013343650453172002,
        0.00013169963316703095,
        0.00012745310104706232,
        0.0001255628603591247,
        0.000000183159970955,
        0.0000001961892756677,
        0.00000007352300248234,
        0.00000007875314964681,
        0.0000000364850989762,
        0.00000003908051035105,
        0.00000000433918602845,
        0.00000000607328184471,
        -0.0000000017326945714,
        -0.00000000086612218381,
        -0.00000000021665123516,
        0.00000000021659494091,
        0.00000000057763132432,
        0.00000000086622183687,
        0.,
        0.00000000017323343895,
        0.00000000043333263436,
        0.00000000051986402761,
        0.00041587607492536396,
        0.00041586526564923765,
        0.00041587607492536396,
        0.00041586526564923765,
        0.00041587607492536396,
        0.00041586526564923765,
        0.00018192450183373597,
        0.00018191977388170268,
        0.,
        0.,
        0.0000779595390387196,
        0.00007795751319484679,
        0.00020790561160161504,
        0.00020790020864894587,
        0.00015591705244407593,
        0.00015591300086148594,
        0.000649662847843695,
        0.0006496459658090854,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        -0.00023395157309163324,
        -0.00023394549176761166,
        -0.0004678484256465097,
        -0.00046783626584292234,
        -0.00038988888660774004,
        -0.0003898787526480564,
        -0.0002599428140448881,
        -0.0002599360571939275,
        -0.00036390102293860227,
        -0.0003638915643305154,
        -0.0001039852341905085,
        -0.00010398253102851876,
        0.00036393886228885947,
        0.0003898280907509522,
        0.00036393886228885947,
        0.0003898280907509522,
        0.00036393886228885947,
        0.0003898280907509522,
        0.00012996296073911556,
        0.00018190086453071064,
        0.,
        0.,
        0.00007796764346746725,
        0.00007794941087194596,
        0.00020792722622028006,
        0.0002078785996469237,
        0.0001559332608804805,
        0.00018187723336909544,
        0.0006497303847567745,
        0.0006495784464439589,
        0.,
        0.,
        0.,
        0.,
        0.,
        0.,
        -0.00023397590154963403,
        -0.0002339211696328843,
        -0.00046789707118246357,
        -0.00046778763294884313,
        -0.00038992942771500996,
        -0.000389838222076968,
        -0.00025996984496229087,
        -0.00025990903330197935,
        -0.00036393886228881306,
        -0.0003638537348144757,
        -0.00010399604824389599,
        -0.00010397171978587721,
    ];

    let pred = model.predict_for_mat_single_row(feat.as_slice(), PredictType::Normal, 0, -1, None)?;
    println!("{:?}", pred);

    // or the fast version
    let fchandle = model.predict_for_mat_single_row_fast_init(PredictType::Normal, 0, -1, DType::Float64, feat.len() as i32, None)?;

    let pred = model.predict_for_mat_single_row_fast(fchandle, feat.as_slice())?;
    println!("{:?}", pred);
}
